{
  "name": "ResTables",
  "tagline": "jQuery plugin for the responsive tables",
  "body": "resTables - jQuery plugin for responsive tables\r\n===============================================\r\n\r\nThe resTables jQuery plugin allows you to easily make your table responsive. It has been created based on the\r\n[stacktable.js](https://johnpolacek.github.io/stacktable.js/) concept by John Polacek.\r\n\r\nInstallation\r\n------------\r\n\r\nYou can download the plugin regular way or use the npm to install it:\r\n \r\n```\r\nnpm install restables --save \r\n```\r\n\r\nUsage\r\n-----\r\n\r\nThe initialization of the plugin is simple:\r\n\r\n```js\r\n$(document).ready(function () {\r\n    $('table').resTables();\r\n});\r\n```\r\n\r\nMake sure to add the necessary CSS classes to display and hide both tables under certain window sizes:\r\n\r\n```css\r\ntable.restables-clone {\r\n    display: none;\r\n}\r\n\r\n@media (max-width: 991px) {\r\n    table.restables-origin {\r\n        display: none;\r\n    }\r\n    \r\n    table.restables-clone {\r\n        display: table;\r\n    }\r\n}\r\n```\r\n\r\nHow it works\r\n------------\r\n\r\nWhen the script is initialized it will create a sibling table but with 2-column layout only. Consider the following\r\ntable structure:\r\n\r\n```html\r\n<table>\r\n    <thead>\r\n        <tr>\r\n            <th>Header 1</th>\r\n            <th>Header 2</th>\r\n            <th>Header 3</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr>\r\n            <td>Value A1</td>\r\n            <td>Value A2</td>\r\n            <td>Value A3</td>\r\n        </tr>\r\n        <tr>\r\n            <td>Value B1</td>\r\n            <td>Value B2</td>\r\n            <td>Value B3</td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n```\r\n\r\nBased on the above the plugin will create a new table with this structure: \r\n \r\n```html\r\n<table>\r\n    <tbody>\r\n        <tr>\r\n            <td>Header 1</td>\r\n            <td>Value A1</td>\r\n        </tr>\r\n        <tr>\r\n            <td>Header 2</td>\r\n            <td>Value A2</td>\r\n        </tr>\r\n        <tr>\r\n            <td>Header 3</td>\r\n            <td>Value A3</td>\r\n        </tr>\r\n    </tbody>\r\n    <tbody>\r\n        <tr>\r\n            <td>Header 1</td>\r\n            <td>Value B1</td>\r\n        </tr>\r\n        <tr>\r\n            <td>Header 2</td>\r\n            <td>Value B2</td>\r\n        </tr>\r\n        <tr>\r\n            <td>Header 3</td>\r\n            <td>Value B3</td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n```\r\n\r\nOptions\r\n-------\r\n\r\n### merge\r\n\r\nDefault value: ```{}```\r\n\r\nAn object containing columns that will be merged with other columns. In the below example columns with indexes\r\n$2 and $3 will be merged with column $1 and column $6 will be merged with column $5.\r\n\r\n```js\r\n// Example\r\n$('#my-table').resTables({\r\n    merge: {\r\n        1: [2, 3], \r\n        5: [6]\r\n    }\r\n});\r\n```\r\n\r\n### move\r\n\r\nDefault value: ```{}```\r\n\r\nAn object containing columns that will be moved. In the below example column with index $1 will be placed at the top\r\nof the new table (index $0) and column $6 as the second row with index $1.\r\n\r\n```js\r\n// Example\r\n$('#my-table').resTables({\r\n    move: {\r\n        1: 0,\r\n        6: 1\r\n    }\r\n});\r\n```\r\n\r\n### skip\r\n\r\nDefault value: ```[]```\r\n\r\nAn array of columns that should be skipped in the cloned table. In the below example columns with indexes $3 and $5\r\nwill not be present in the new table. \r\n\r\n```js\r\n// Example\r\n$('#my-table').resTables({\r\n    skip: [3, 5]\r\n});\r\n```\r\n\r\n### span\r\n\r\nDefault value: ```[]```\r\n\r\nAn array of columns that should be spanned - the ```colspan=\"2\"``` attribute will be added. In the below example\r\ncolumns with indexes $2 and $4 will have the ```colspan=\"2\"``` attribute added and will appear as one cell.\r\n\r\n```js\r\n// Example\r\n$('#my-table').resTables({\r\n    span: [2, 4]\r\n});\r\n```\r\n\r\n### cssClassOrigin\r\n\r\nDefault value: ```restables-origin```\r\n \r\nThe CSS class that will be added to origin table.\r\n\r\n```js\r\n// Example\r\n$('#my-table').resTables({\r\n    cssClassOrigin: 'my-origin-table'\r\n});\r\n```\r\n\r\n### cssClassClone\r\n\r\nDefault value: ```restables-clone```\r\n\r\nThe CSS class that will be added to cloned table. \r\n\r\n```js\r\n// Example\r\n$('#my-table').resTables({\r\n    cssClassClone: 'my-cloned-table'\r\n});\r\n```\r\n\r\n### uniqueAttributes\r\n\r\nDefault value: ```['id', 'for']```\r\n\r\nThe list of attributes that should remain unique. Each cloned element containing those attributes will have them\r\nupdated by adding the suffix (see ```attributeSuffix``` below).\r\n\r\n```js\r\n// Example\r\n$('#my-table').resTables({\r\n    uniqueAttributes: ['id', 'for', 'data-my-id']\r\n});\r\n```\r\n\r\n### attributeSuffix\r\n\r\nDefault value: ```'-restables-clone'```\r\n\r\nThe suffix that will be added to the unique attributes in the cloned elements.\r\n\r\n```js\r\n// Example\r\n$('#my-table').resTables({\r\n    attributeSuffix: '-my-suffix'\r\n});\r\n```\r\n\r\n### cloneCallback\r\n\r\nDefault value: ```null```\r\n\r\nThe callback that is triggered just before the cloned table is inserted into DOM.\r\n\r\n```js\r\n// Example\r\n$('#my-table').resTables({\r\n    cloneCallback: function (clone) {\r\n        clone.find('.checkbox').addClass('checkbox-mobile');\r\n    }\r\n});\r\n```",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}